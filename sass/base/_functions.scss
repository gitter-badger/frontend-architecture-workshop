/// Removes the units from a value returning just the integer
/// @access private
/// @param {String} $num A united number like 3px or 1.2em
/// @return {Number}
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

/// Removes the units from a value returning just the integer
/// @access public
/// @param {Number} $pxval Pixel value to return as em
/// @param {Number} $base defaults to 16px, but optional context can be passed in
/// @return {Number}
/// @example PEM function
///     .class-name {
///        font-size: pem(36); // Returns 2em (or 36px)
///        padding: pem(18, 36) // pass in current font-size context to return 18px/1em padding
///     } 
@function pem($pxval, $base: $base-font-px) {
  @return strip-unit($pxval) / $base * 1em;
}

/// Returns a color from the color map with opacity and lightness/darkness variations
/// @access public
/// @param {String} $name Name of color to pull from color map
/// @param {Number} $opacity [1] An opacity value between 0 and 1
/// @param {Number} $lighten [0] Pass in a percentage value to this parameter to lighten outputed value
/// @param {Number} $darken [0] Pass in a percentage value to this parameter to darken outputed value
/// @return {String}
/// @example Color function
///     .class-name {
///         color: color(brand-primary, .7, $lighten: 10%);
///     }
@function color($name, $opacity: 1, $lighten: 0, $darken: 0) {
    $color: map-get($colors, $name);
    @if $color != null {
        @if $darken > 0 {
            @return darken($color, $darken);
        }
        @elseif $lighten > 0 {
            @return lighten($color, $lighten);
        }
        @else {
            @return rgba($color, $opacity);
        }
    }
    @else {
        @error "#{$name} is not a valid color";
    }
}
